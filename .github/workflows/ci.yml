name: CI

on: [push, pull_request]

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [
          "3.12"
        ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          [ -f ./requirements.txt ] && pip install -r ./requirements.txt || echo "No requirements.txt found"
          [ -f ./test-requirements.txt ] && pip install -r ./test-requirements.txt || echo "No test-requirements.txt found"
      - name: Run unittests
        run: |
          coverage run -m xmlrunner -o ./xmlunit

      - name: Prepare coverage reports
        run: |
          coverage report -m
          coverage html
          coverage xml

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: htmlcov
          path: htmlcov/

      - name: Publish coverage reports
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: matrix.os == 'ubuntu-latest'
        with:
          filename: ./**/coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          env_vars: OS,PYTHON
          flags: ${{matrix.os}}, ${{matrix.os}}-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }} # required
          verbose: true

      - name: Publish test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Unit tests (${{matrix.os}}, ${{ matrix.python-version }}, ${{ github.event_name }})
          path: ./xmlunit/TEST-*.xml
          reporter: java-junit